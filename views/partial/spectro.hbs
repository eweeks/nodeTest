<div id="spectroHolder" class="col-sm-5 col-md-8">
 <div id="vis" class="spectrogram magnify" width="800" height="300">
   <h1 id="intro">Select a site on the map to get started.</h1>
   <div class="large"></div>
   <img id="imageGrey" class="small" src="" height="260" />
   <div id="progressWrapper"><img  id="imageColor" src="" height="260" /></div>

 </div>
  <div id="spectrobuttons" height="260" width="425">
    <p id="infoButton">
      <a tabindex="0" class="btn btn-info btn-sm question" role="button" data-placement="bottom"
    data-toggle="popover" data-trigger="focus" title="What is a Spectrogram?"
    data-content="Spectrograms are visual representations of sounds. Color on a
    spectrogram reflects the volume while the vertical position shows the frequency or pitch.">What is a Spectrogram?
        <span class="glyphicon glyphicon-question-sign"></span>
      </a>
    </p>
    <button type="button" id="mag" class="btn btn-primary btn-lg">Magnifier</button>
    <div class="btn-group" id="buttonGroup"data-toggle="buttons">

</div>
  </div>
  <div id="audioplayer">
    <button id="playpause" title="play" class="btn btn-default btn-lg"onclick="togglePlayPause()">
      <span id="playbutton"class="glyphicon glyphicon-play" aria-hidden="true"></span>
    </button>
    <div id="timeline">
        <div id="playhead"></div>
    </div>
  </div>
  <button id="setVolume" title="play" class="btn btn-default btn-lg" onclick="showVolume()">
    <span id="volumebutton" class="glyphicon glyphicon-volume-up" aria-hidden="true"></span>
  </button>
  <input id="volume" type="range" min="0" max="100" value="75" step="1"  onchange="setVolume()" orient="vertical">
  <div style="clear: both;"></div>
    <div id="player"></div>
</div>

{{#extend "scripts"}}
<script src="/javascripts/audio.js"></script>
<script>  var sample = new Spectrogram('/sounds/LowerBerry_5min.mp3', "#vis");</script>
<script>
  var native_width = 0;
	var native_height = 0;

  $( "#mag" ).click(function() {
    $( this ).toggleClass( "zoom" );
    if (!$(this).hasClass("zoom")) {
        $(".large").fadeOut(100);
    }
});

	//Now the mousemove function
	$(".magnify").mousemove(function(e){
		//When the user hovers on the image, the script will first calculate
		//the native dimensions if they don't exist. Only after the native dimensions
		//are available, the script will show the zoomed version.
		if(!native_width && !native_height)
		{
			//This will create a new image object with the same image as that in .small
			//We cannot directly get the dimensions from .small because of the
			//width specified to 200px in the html. To get the actual dimensions we have
			//created this image object.
			var image_object = new Image();
			image_object.src = $(".small").attr("src");

			//This code is wrapped in the .load function which is important.
			//width and height of the object would return 0 if accessed before
			//the image gets loaded.
			native_width = image_object.width;
			native_height = image_object.height;
		}
		else
		{
			//x/y coordinates of the mouse
			//This is the position of .magnify with respect to the document.
			var magnify_offset = $(this).offset();
			//We will deduct the positions of .magnify from the mouse positions with
			//respect to the document to get the mouse positions with respect to the
			//container(.magnify)
      //e.pageX - $("#vis").offset().left+$('#vis').scrollLeft();
			var mx = e.pageX - magnify_offset.left+$('#vis').scrollLeft();
			var my = e.pageY - magnify_offset.top+$('#vis').scrollTop();
      console.log("this width "+$(this).width());
      console.log("this height "+$(this).height());
			//Finally the code to fade out the glass if the mouse is outside the container
			if(mx < $(".small").width() && my < $(this).height() && mx > 0 && my > 0)
			{
        if ($("#mag").hasClass("zoom")) {
            $(".large").fadeIn(100);
        }
			//	$(".large").fadeIn(100);
			}
			else
			{
				$(".large").fadeOut(100);
			}
			if($(".large").is(":visible"))
			{
				//The background position of .large will be changed according to the position
				//of the mouse over the .small image. So we will get the ratio of the pixel
				//under the mouse pointer with respect to the image and use that to position the
				//large image inside the magnifying glass
				var rx = Math.round(mx/$(".small").width()*native_width - $(".large").width()/2)*-1;
				var ry = Math.round(my/$(".small").height()*native_height - $(".large").height()/2)*-1;
				var bgp = rx + "px " + ry + "px";

				//Time to move the magnifying glass with the mouse
				var px = mx - $(".large").width()/2;
				var py = my - $(".large").height()/2;
				//Now the glass moves with the mouse
				//The logic is to deduct half of the glass's width and height from the
				//mouse coordinates to place it with its center at the mouse coordinates

				//If you hover on the image now, you should see the magnifying glass in action
				$(".large").css({left: px, top: py, backgroundPosition: bgp});
			}
		}
	})

</script>
{{/extend}}
